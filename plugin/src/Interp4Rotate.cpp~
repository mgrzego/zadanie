#include <iostream>
#include <cmath>
#include <chrono>
#include <thread>
#include "Interp4Rotate.hh"
#include "math.h"

using std::cout;
using std::endl;


extern "C" {
 Interp4Command* CreateCmd(void);
}




/*!
 * \brief
 *
 *
 */
Interp4Command* CreateCmd(void)
{
  return Interp4Rotate::CreateCmd();
}


/*!
 *
 */
Interp4Rotate::Interp4Rotate():  _ASpeed_degS(0), _RAngle_deg(0)
{}


/*!
 *
 */
void Interp4Rotate::PrintCmd() const
{
  /*
   *  Tu trzeba napisać odpowiednio zmodyfikować kod poniżej.
   */
  cout << GetCmdName() << " " << _ASpeed_degS  << " " << _RAngle_deg << endl;
}


/*!
 *
 */
const char* Interp4Rotate::GetCmdName() const
{
  return "Rotate";
}


/*!
 *
 */
bool Interp4Rotate::ExecCmd( DronPose     *pRobPose,  Visualization *pVis) const
{
  /*
   *  Tu trzeba napisać odpowiedni kod.
   */
  double a, angP, angN;
  360 + pRobPose->GetAngle_deg(a);
  angP = fmod(a+_RAngle_deg, 360);
  angN = fmod(a-_RAngle_deg, 360);
  if(_ASpeed_degS>0){
    pRobPose->SetAngle_deg(angP);
  }
  else if(_ASpeed_degS<0){
    pRobPose->SetAngle_deg(angN);  
  }
  else{
    pRobPose->SetAngle_deg((int)a%360);
  }
  return true;
}


/*!
 *
 */
bool Interp4Rotate::ReadParams(std::istream& Strm_CmdsList)
{
  /*
   *  Funkcja odczytuje wprowadzone parametry
   */
  return Strm_CmdsList >> _ASpeed_degS >> _RAngle_deg;
  
}


/*!
 *
 */
Interp4Command* Interp4Rotate::CreateCmd()
{
  return new Interp4Rotate();
}


/*!
 *
 */
void Interp4Rotate::PrintSyntax() const
{
  cout << "   Rotate  aspeed[deg/s]  rangle[deg]" << endl;
}
